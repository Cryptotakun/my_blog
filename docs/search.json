[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "Bonjour et bienvenue sur mon blog ! Je suis très heureux de vous accueillir ici pour partager mes idées, mes expériences et mes découvertes avec vous.\nDans ce blog, vous trouverez des informations sur les sites olympique et la météo. J’ai hâte de vous présenter mes réflexions.\nN’hésitez pas à explorer les différents documents. Merci de votre visite et à bientôt !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "my_blog",
    "section": "",
    "text": "TD1ravance\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTD2ravance\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTD3ravancé\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nolympicsWeather\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nValetin Gottardini\n\n\n\n\n\n\n  \n\n\n\n\nBienvenue sur mon blog\n\n\n\n\n\n\n\naccueil\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nValentin Gottardini\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "olympicsWeather",
    "section": "",
    "text": "Le package olympicsWeather est un outil puissant pour obtenir des données météorologiques historiques pour les Jeux Olympiques. Il fournit un accès facile et pratique à des informations précieuses sur le temps lors des événements olympiques passés.\n\n#Ces lignes de codes servent à illustrer l'installation du package depuis GitHub.\nremotes::install_github(\"Utilisateur/olympicsWeather\")\n\n\n\n\n\nVous pouvez obtenir les prévisions météo à 7 jours pour le Stade de France en utilisant la fonction get_weather_forecast() du package olympicsWeather. Voici comment faire :\n\nlibrary(httr2)\nlibrary(tibble)\nlibrary(usethis)\nlibrary(devtools)\nlibrary(httr2)\nlibrary(jsonlite)\n\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.3\n\nlibrary(tibble)\nlibrary(purrr)\n\n\nAttachement du package : 'purrr'\n\n\nL'objet suivant est masqué depuis 'package:jsonlite':\n\n    flatten\n\nlibrary(tidygeocoder)\nlibrary(usethis)\nlibrary(roxygen2)\nlibrary(lubridate)\n\n\nAttachement du package : 'lubridate'\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(testthat)\n\n\nAttachement du package : 'testthat'\n\n\nL'objet suivant est masqué depuis 'package:purrr':\n\n    is_null\n\n\nL'objet suivant est masqué depuis 'package:devtools':\n\n    test_file\n\n\nLes objets suivants sont masqués depuis 'package:httr2':\n\n    local_mock, with_mock\n\nlibrary(ggplot2)\nlibrary(olympicsWeather)\n# Obtenez les prévisions météo pour le Stade de France\nforecast_stade_france &lt;- get_forecast(\"Stade de France\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.5 seconds\n\n\n\n\n\nPour Tahiti :\n\n# Obtenez les prévisions météo pour Tahiti\nforecast_tahiti &lt;- get_forecast(\"Tahiti\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\n\n\n\n\nPour les coordonnées GPS 43.276703, 5.334791 :\n\n# Obtenez les prévisions météo pour les coordonnées GPS 43.276703, 5.334791\nforecast_gps &lt;- get_forecast(c(43.276703,5.334791))\n\n\n\n\nAssurez-vous d’ajuster les noms de lieux et les coordonnées GPS selon vos besoins réels."
  },
  {
    "objectID": "posts/post-with-code/index.html#librairie-olympicsweather",
    "href": "posts/post-with-code/index.html#librairie-olympicsweather",
    "title": "olympicsWeather",
    "section": "",
    "text": "Le package olympicsWeather est un outil puissant pour obtenir des données météorologiques historiques pour les Jeux Olympiques. Il fournit un accès facile et pratique à des informations précieuses sur le temps lors des événements olympiques passés.\n\n#Ces lignes de codes servent à illustrer l'installation du package depuis GitHub.\nremotes::install_github(\"Utilisateur/olympicsWeather\")\n\n\n\n\n\nVous pouvez obtenir les prévisions météo à 7 jours pour le Stade de France en utilisant la fonction get_weather_forecast() du package olympicsWeather. Voici comment faire :\n\nlibrary(httr2)\nlibrary(tibble)\nlibrary(usethis)\nlibrary(devtools)\nlibrary(httr2)\nlibrary(jsonlite)\n\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.3\n\nlibrary(tibble)\nlibrary(purrr)\n\n\nAttachement du package : 'purrr'\n\n\nL'objet suivant est masqué depuis 'package:jsonlite':\n\n    flatten\n\nlibrary(tidygeocoder)\nlibrary(usethis)\nlibrary(roxygen2)\nlibrary(lubridate)\n\n\nAttachement du package : 'lubridate'\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(testthat)\n\n\nAttachement du package : 'testthat'\n\n\nL'objet suivant est masqué depuis 'package:purrr':\n\n    is_null\n\n\nL'objet suivant est masqué depuis 'package:devtools':\n\n    test_file\n\n\nLes objets suivants sont masqués depuis 'package:httr2':\n\n    local_mock, with_mock\n\nlibrary(ggplot2)\nlibrary(olympicsWeather)\n# Obtenez les prévisions météo pour le Stade de France\nforecast_stade_france &lt;- get_forecast(\"Stade de France\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.5 seconds\n\n\n\n\n\nPour Tahiti :\n\n# Obtenez les prévisions météo pour Tahiti\nforecast_tahiti &lt;- get_forecast(\"Tahiti\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\n\n\n\n\nPour les coordonnées GPS 43.276703, 5.334791 :\n\n# Obtenez les prévisions météo pour les coordonnées GPS 43.276703, 5.334791\nforecast_gps &lt;- get_forecast(c(43.276703,5.334791))\n\n\n\n\nAssurez-vous d’ajuster les noms de lieux et les coordonnées GPS selon vos besoins réels."
  },
  {
    "objectID": "posts/post-with-code/TD2ravance.html",
    "href": "posts/post-with-code/TD2ravance.html",
    "title": "TD2ravance",
    "section": "",
    "text": "Question 1 :\n\nlibrary(rvest)\nlibrary(purrr)\nlist_tables &lt;-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\nhtml_elements(\".wikitable\") |&gt;\nhtml_table()\n\nl’objet list_tables contient toutes les tables HTML extraites de la page Wikipedia “Liste des médaillés olympiques”. Chaque élément de cette liste est une table représentée sous forme de dataframe en R. Chaque dataframe contient les données de chaque table extraite. Nous avons donc 6 tables dans list_tables.\nQuestion 2 :\n\ntable_1 &lt;- list_tables[[1]]\ndata_medailles_sport_ete &lt;- table_1[-1, -1]\n\ncolnames(data_medailles_sport_ete) &lt;- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\ncols_to_convert &lt;- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\ndata_medailles_sport_ete[, cols_to_convert] &lt;- lapply(data_medailles_sport_ete[, cols_to_convert], as.integer)\n\nhead(data_medailles_sport_ete)\n\n# A tibble: 6 × 10\n  Discipline  Annees            Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;       &lt;chr&gt;                &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme  Depuis 1896             29            48  1028   1030   1027  3085\n2 Aviron      Depuis 1900             28            14   269    268    273   810\n3 Badminton   Depuis 1992              8             5    39     39     43   121\n4 Basket-ball Depuis 1936             20             4    32     32     32    96\n5 Boxe        1904, 1908,depui…       26            13   266    266    472  1004\n6 Canoë-kayak Depuis 1936             20            16   242    241    243   726\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nQuestion 3 :\n\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[order(-data_medailles_sport_ete$Total), ]\ntop_3_disciplines &lt;- data_medailles_sport_ete[1:3, \"Discipline\"]\ntop_3_disciplines\n\n# A tibble: 3 × 1\n  Discipline              \n  &lt;chr&gt;                   \n1 Athlétisme              \n2 Natation(hommes, femmes)\n3 Lutte                   \n\n\nQuestion 4 :\n\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[order(data_medailles_sport_ete$Epreuves_2020), ]\ndisciplines_moins_epreuves_2020 &lt;- data_medailles_sport_ete[data_medailles_sport_ete$Epreuves_2020 == min(data_medailles_sport_ete$Epreuves_2020), \"Discipline\"]\ndisciplines_moins_epreuves_2020\n\n# A tibble: 8 × 1\n  Discipline           \n  &lt;chr&gt;                \n1 Pentathlon moderne   \n2 Hockey sur gazon     \n3 Football             \n4 Volley-ball          \n5 Water polo           \n6 Handball             \n7 Natation synchronisée\n8 Golf                 \n\n\nQuestion 5 :\n\ncalcul_nb_editions &lt;- function(depuis, annees_jeux_ete) {\n  nb_annees &lt;- length(annees_jeux_ete)\n    nb_editions &lt;- sum(annees_jeux_ete &gt;= depuis)\n  \n  return(nb_editions)\n}\n\nannees_jeux_ete &lt;- c(1896, 1900, 1904, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)\ndepuis &lt;- 1900\nnb_editions_depuis_1900 &lt;- calcul_nb_editions(depuis, annees_jeux_ete)\nprint(nb_editions_depuis_1900)\n\n[1] 28\n\n\nQuestion 6 :\n\ncalcul_nb_editions_str &lt;- function(annees_str, annees_jeux_ete) {\n  annees &lt;- unlist(strsplit(annees_str, \",\\\\s*\"))\n  \n  nb_editions_total &lt;- 0\n  \n  for (annee in annees) {\n    if (grepl(\"depuis\", annee)) {\n      debut_intervalle &lt;- as.integer(gsub(\"^depuis \", \"\", annee))\n      nb_editions_total &lt;- nb_editions_total + sum(annees_jeux_ete &gt;= debut_intervalle)\n    } else {\n      annee &lt;- as.integer(annee)\n      if (annee %in% annees_jeux_ete) {\n        nb_editions_total &lt;- nb_editions_total + 1\n      }\n    }\n  }\n  return(nb_editions_total)\n}\nannees_jeux_ete &lt;- c(1896, 1900, 1904, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)\nannees_str &lt;- \"1896, 1904, depuis 1920\"\nnb_editions_str &lt;- calcul_nb_editions_str(annees_str, annees_jeux_ete)\nprint(nb_editions_str)\n\n[1] 26\n\n\nquestion 7 :\n\ncalcul_nb_editions &lt;- function(depuis, annees_jeux_ete) {\n  if (is.character(depuis)) {\n    calcul_nb_editions.character(depuis, annees_jeux_ete)\n  } else if (is.numeric(depuis)) {\n    calcul_nb_editions.integer(depuis, annees_jeux_ete)\n  } else {\n    stop(\"Type d'entrée non pris en charge\")\n  }\n}\n\ncalcul_nb_editions.integer &lt;- function(depuis, annees_jeux_ete) {\n  return(sum(annees_jeux_ete &gt;= depuis))\n}\n\ncalcul_nb_editions.character &lt;- function(depuis_str, annees_jeux_ete) {\n  annees &lt;- unlist(strsplit(depuis_str, \",\\\\s*\"))\n  \n  nb_editions_total &lt;- 0\n  \n  for (annee in annees) {\n    if (grepl(\"depuis\", annee)) {\n      debut_intervalle &lt;- as.integer(gsub(\"^depuis \", \"\", annee))\n      nb_editions_total &lt;- nb_editions_total + sum(annees_jeux_ete &gt;= debut_intervalle)\n    } else {\n      annee &lt;- as.integer(annee)\n      if (annee %in% annees_jeux_ete) {\n        nb_editions_total &lt;- nb_editions_total + 1\n      }\n    }\n  }\n  return(nb_editions_total)\n}\nannees_jeux_ete &lt;- c(1896, 1900, 1904, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)\nresultat_integer &lt;- calcul_nb_editions(2000, annees_jeux_ete)\nresultat_character &lt;- calcul_nb_editions(\"1904–1924, depuis 1948\", annees_jeux_ete)\n\nWarning in calcul_nb_editions.character(depuis, annees_jeux_ete): NAs\nintroduits lors de la conversion automatique\n\nprint(resultat_integer)\n\n[1] 6\n\nprint(resultat_character)\n\n[1] 19\n\n\nil y a eu 6 éditions des JO d’été depuis l’année 2000. il y a eu 19 éditions des JO d’été depuis 1904-1924 jusqu’à l’année actuelle, avec une interruption entre 1928 et 1948.\nQuestion 8 :\n\ncalcul_medailles_individuelles &lt;- function(data) {\n\n  total_medailles &lt;- aggregate(Medals ~ Athlete, data = data, FUN = sum)\n  \n  max_medailles &lt;- max(total_medailles$Medals)\n  \n  athlètes_max_medailles &lt;- total_medailles[total_medailles$Medals == max_medailles, ]\n  \n  if (nrow(athlètes_max_medailles) &gt; 1) {\n    athlètes_str &lt;- paste(athlètes_max_medailles$Athlete, collapse = \", \")\n    return(list(\"Athlètes à égalité\" = athlètes_str, \"Nombre de médailles\" = max_medailles))\n  } else {\n    return(athlètes_max_medailles)\n  }\n}\n\nQuestion 9 :\n\nathletes_info &lt;- strsplit(as.character(data_medailles_sport_ete$Athletes_medailles), \", \")\n\nextract_medals_data &lt;- function(info) {\n  athlete_name &lt;- gsub(\"\\\\(.+\\\\)\", \"\", info)\n  medals_info &lt;- gsub(\"[^0-9-]\", \"\", info)\n  medals_split &lt;- strsplit(medals_info, \"-\")[[1]]\n  data.frame(Athlete = athlete_name, Gold = as.integer(medals_split[1]), \n             Silver = as.integer(medals_split[2]), Bronze = as.integer(medals_split[3]))\n}\nathletes_medals_list &lt;- lapply(athletes_info, function(athlete_group) {\n  do.call(rbind, lapply(athlete_group, extract_medals_data))\n})\nall_athletes_medals &lt;- do.call(rbind, athletes_medals_list)\nall_athletes_medals$Total &lt;- with(all_athletes_medals, Gold + Silver + Bronze)\ntop_athletes &lt;- all_athletes_medals[order(-all_athletes_medals$Total), ][1:3,]\nprint(top_athletes)\n\n           Athlete Gold Silver Bronze Total\n30 Michael Phelps    23      3      2    28\n25    Teddy Riner     3      0     22    25\n23           CRO)     1      1     21    23\n\n\nQuestion 10 :\n\nextraire_nationalite_athlete &lt;- function(chaine) {\n \n  nationalites &lt;- regmatches(chaine, gregexpr(\"\\\\(([^)]+)\\\\)\", chaine))[[1]]\n  nationalites &lt;- gsub(\"[()]\", \"\", nationalites) \n  nationalites_count &lt;- table(nationalites)\n\n  nationalites_athletes &lt;- nationalites_count[names(nationalites_count) %in% c(\"FIN\", \"USA\", \"CHN\", \"GBR\", \"GER\", \"RUS\")] \n  \n  return(nationalites_athletes)\n}\nnationalites_resultats &lt;- lapply(data_medailles_sport_ete$Athletes_medailles, extraire_nationalite_athlete)\n\nnationalites_agregees &lt;- Reduce(`+`, nationalites_resultats)\ntop_3_nationalites &lt;- sort(nationalites_agregees, decreasing = TRUE)[1:3]\n\nprint(top_3_nationalites)\n\n[1] NA NA NA\n\n\nQuestion 11 :\n\ntable_jo_hiver &lt;- list_tables[[2]]\nextraire_nationalite_athlete &lt;- function(chaine) {\n\n}\n\ncalcul_medailles_individuelles &lt;- function(data) {\n\n}\nlibrary(purrr)\n\n\nnationalites &lt;- map(table_jo_hiver$Athletes_medailles, extraire_nationalite_athlete)\n\nWarning: Unknown or uninitialised column: `Athletes_medailles`."
  },
  {
    "objectID": "posts/post-with-code/TD1ravance.html",
    "href": "posts/post-with-code/TD1ravance.html",
    "title": "TD1ravance",
    "section": "",
    "text": "library(dplyr)\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readxl)\nlibrary(readr)\n\ndata_ex &lt;- read.csv(\"C:/Users/cyril/OneDrive/Documents/exercice.R/data1.csv\", sep = \";\")\ndata_ex &lt;- na.omit(data_ex)\ntypes_data_ex &lt;- sapply(data_ex, class)\ncat(\"Nature des colonnes :\", types_data_ex, \"\\n\")\n\nNature des colonnes : character character character character \n\n\nQuestion 2\n\ntypes_data_ex &lt;- sapply(data_ex, class)\ncat(\"Nature des colonnes :\", types_data_ex, \"\\n\")\n\nNature des colonnes : character character character character \n\nnb_lignes_data_ex &lt;- nrow(data_ex)\ncat(\"Nombre de lignes dans la data.frame :\", nb_lignes_data_ex, \"\\n\")\n\nNombre de lignes dans la data.frame : 31 \n\nnb_lignes_data_ex\n\n[1] 31\n\ntypes_data_ex\n\n                     geo_point                            nom \n                   \"character\"                    \"character\" \nsites_olympiques_paralympiques                         sports \n                   \"character\"                    \"character\" \n\n\nQuestion 3\n\nnombre_sites_olympiques &lt;- sum(data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\" | data_ex$sites_olympiques_paralympiques == \"Site olympique\")\nnombre_sites_olympiques\n\n[1] 26\n\n\nQuestion 4\n\nnombre_sites_paralympiques &lt;- sum(data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\" | data_ex$sites_olympiques_paralympiques == \"Site paralympique\")\nnombre_sites_paralympiques\n\n[1] 19\n\n\nQuestion 5\n\nsites_multiples &lt;- data_ex %&gt;%\n  group_by(nom) %&gt;%\n  filter(n_distinct(strsplit(sports, \",\")[[1]]) &gt; 1) %&gt;%\n  distinct(nom)\ncat(\"Sites avec plusieurs disciplines sportives :\\n\")\n\nSites avec plusieurs disciplines sportives :\n\ncat(sites_multiples$nom, sep = \"\\n\")\n\nStade de France\nChâteau de Versailles\nGrand Palais\nInvalides\nPont d'Iéna\nArena Bercy\nArena Paris nord\nArena Paris Sud 6 (Porte de Versailles)\nStade de la Concorde\nArena Champs de Mars\nStade Tour Eiffel\nArena La Chapelle\nCentre aquatique\nArena Paris Sud 1 (Porte de Versailles)\nArena Paris Sud 4 (Porte de Versailles)\nLa Défense Arena\nStade nautique\nVélodrome National de Saint-Quentin-en-Yvelines\nStade Roland Garros\n\n\nQuestion 6\n\nliste_sports &lt;- strsplit(data_ex$sports, \",\")\n\ntous_les_sports &lt;- unlist(liste_sports)\n\nsports_para_olympiques &lt;- tous_les_sports[grep(\"Para\", tous_les_sports)]\n\ncat(\"Sports para-olympiques accueillis :\\n\")\n\nSports para-olympiques accueillis :\n\ncat(sports_para_olympiques, sep = \"\\n\")\n\nPara athlétisme\nPara équitation\nPara athlétisme\nPara taekwondo\nPara tir à l'arc\nPara judo\nPara Badminton\nPara powerlifting\nPara tennis de table\nPara natation\nPara canoë\nPara aviron\nPara cyclisme sur piste\nPara cyclisme sur route\n\n\nQuestion 7\n\nnombre_disciplines_par_site &lt;- data_ex %&gt;%\n  group_by(nom) %&gt;%\n  summarise(nombre_disciplines = n_distinct(strsplit(sports, \",\")[[1]]))\n\n\nsite_plus_disciplines &lt;- nombre_disciplines_par_site %&gt;%\n  filter(nombre_disciplines == max(nombre_disciplines))\n\n\ncat(\"Site(s) accueillant le plus de disciplines différentes :\\n\")\n\nSite(s) accueillant le plus de disciplines différentes :\n\ncat(site_plus_disciplines$nom, sep = \"\\n\")\n\nArena Bercy\nArena Champs de Mars\nArena La Chapelle\nArena Paris nord\nGrand Palais\nInvalides\nStade de la Concorde\nStade nautique\n\n\nQuestion 8\n\nall_sports &lt;- unlist(strsplit(data_ex$sports, \",\"))\n\nnombre_occurrences &lt;- table(all_sports)\n\ndiscipline_plus_sites &lt;- names(nombre_occurrences)[which.max(nombre_occurrences)]\ncat(\"Discipline qui aura lieu sur le plus grand nombre de sites :\", discipline_plus_sites, \"\\n\")\n\nDiscipline qui aura lieu sur le plus grand nombre de sites : Athlétisme \n\nsites_discipline_plus_sites &lt;- data_ex %&gt;%\n  filter(grepl(discipline_plus_sites, sports)) %&gt;%\n  distinct(nom)\ncat(\"Sites où cette discipline aura lieu :\\n\")\n\nSites où cette discipline aura lieu :\n\ncat(sites_discipline_plus_sites$nom, sep = \"\\n\")\n\nStade de France\nInvalides\nPont d'Iéna\nHôtel de ville de Paris\n\n\nQuestion 9\n\nall_sports &lt;- unlist(strsplit(data_ex$sports, \",\"))\n\nnombre_occurrences &lt;- table(all_sports)\n\ndiscipline_plus_sites &lt;- names(nombre_occurrences)[which.max(nombre_occurrences)]\n\ncat(\"Discipline qui aura lieu sur le plus grand nombre de sites :\", discipline_plus_sites, \"\\n\")\n\nDiscipline qui aura lieu sur le plus grand nombre de sites : Athlétisme \n\nsites_discipline_plus_sites &lt;- data_ex %&gt;%\n  filter(grepl(discipline_plus_sites, sports)) %&gt;%\n  distinct(nom)\n\n\ncat(\"Sites où cette discipline aura lieu :\\n\")\n\nSites où cette discipline aura lieu :\n\ncat(sites_discipline_plus_sites$nom, sep = \"\\n\")\n\nStade de France\nInvalides\nPont d'Iéna\nHôtel de ville de Paris\n\n\nQuestion 10\n\ndistance_vol_oiseau &lt;- function(coord1, coord2) {\n  lat_lon1 &lt;- as.numeric(strsplit(coord1, \", \")[[1]])\n  lat_lon2 &lt;- as.numeric(strsplit(coord2, \", \")[[1]])\n  \n  lat1 &lt;- lat_lon1[1]\n  lon1 &lt;- lat_lon1[2]\n  lat2 &lt;- lat_lon2[1]\n  lon2 &lt;- lat_lon2[2]\n  \n  rad &lt;- pi/180\n  dlat &lt;- (lat2 - lat1) * rad\n  dlon &lt;- (lon2 - lon1) * rad\n  a &lt;- sin(dlat/2)^2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(dlon/2)^2\n  c &lt;- 2 * atan2(sqrt(a), sqrt(1-a))\n  R &lt;- 6371 # Rayon de la Terre en kilomètres\n  return(R * c)\n}\n\nsite1 &lt;- \"\"\nsite2 &lt;- \"\"\ndistance_min &lt;- Inf\n\nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i+1):nrow(data_ex)) {\n    distance &lt;- distance_vol_oiseau(data_ex[i, \"geo_point\"], data_ex[j, \"geo_point\"])\n    if (distance &lt; distance_min) {\n      distance_min &lt;- distance\n      site1 &lt;- data_ex[i, \"nom\"]\n      site2 &lt;- data_ex[j, \"nom\"]\n    }\n  }\n}\n\ncat(\"Les deux sites les plus proches sont :\", site1, \"et\", site2, \"\\n\")\n\nLes deux sites les plus proches sont : Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines \n\ncat(\"Distance à vol d'oiseau entre les deux sites :\", distance_min, \"kilomètres\\n\")\n\nDistance à vol d'oiseau entre les deux sites : 0.0892039 kilomètres\n\n\nQuestion 11\n\nsite1 &lt;- \"\"\nsite2 &lt;- \"\"\ndistance_max &lt;- 0\n\nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i+1):nrow(data_ex)) {\n    distance &lt;- distance_vol_oiseau(data_ex[i, \"geo_point\"], data_ex[j, \"geo_point\"])\n    if (distance &gt; distance_max) {\n      distance_max &lt;- distance\n      site1 &lt;- data_ex[i, \"nom\"]\n      site2 &lt;- data_ex[j, \"nom\"]\n    }\n  }\n}\n\ncat(\"Les deux sites les plus éloignés sont :\", site1, \"et\", site2, \"\\n\")\n\nLes deux sites les plus éloignés sont : Colline d'Elancourt et Stade nautique \n\ncat(\"Distance à vol d'oiseau entre les deux sites :\", distance_max, \"kilomètres\\n\")\n\nDistance à vol d'oiseau entre les deux sites : 49.63337 kilomètres"
  },
  {
    "objectID": "posts/post-with-code/TD3ravance.html",
    "href": "posts/post-with-code/TD3ravance.html",
    "title": "TD3ravancé",
    "section": "",
    "text": "library(stringr)\nlibrary(lubridate)\n\n\nAttachement du package : 'lubridate'\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(arrow)\n\n\nAttachement du package : 'arrow'\n\n\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n\n\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n\nlibrary(dplyr)\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(RSQLite)\nlibrary(jsonlite)\n\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.3\n\n\nQuestion 1\n\nchemin_dossier &lt;- \"data\"\n\nfichiers &lt;- list.files(chemin_dossier)\n\ncat(\"Les fichiers présents dans le dossier 'data' sont :\\n\")\n\nLes fichiers présents dans le dossier 'data' sont :\n\ncat(fichiers, sep = \"\\n\")\nextensions &lt;- tools::file_ext(fichiers)\ncat(\"\\nLes extensions des différents fichiers sont :\\n\")\n\n\nLes extensions des différents fichiers sont :\n\ncat(extensions, sep = \"\\n\")\n\nQuestion 2\n\ntable_parquet &lt;- arrow::read_parquet(\"C:\\\\Users\\\\cyril\\\\OneDrive\\\\Documents\\\\exercice.R\\\\data\\\\tokyo_athletes.parquet\")\n\nprint(paste(\"Dimensions de la table :\", nrow(table_parquet), \" lignes x \", ncol(table_parquet), \" colonnes\"))\n\n[1] \"Dimensions de la table : 11085  lignes x  3  colonnes\"\n\nprint(\"Colonnes présentes : \")\n\n[1] \"Colonnes présentes : \"\n\nprint(colnames(table_parquet))\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\nQuestion 3\n\ndata_json &lt;- jsonlite::fromJSON(\"C:\\\\Users\\\\cyril\\\\OneDrive\\\\Documents\\\\exercice.R\\\\data\\\\olympics_athletes.json\")\n\ntable &lt;- as.data.frame(data_json)\n\ncat(\"Dimensions de la table :\", nrow(table), \"lignes x \", ncol(table), \"colonnes\\n\")\n\nDimensions de la table : 269731 lignes x  13 colonnes\n\ncat(\"Colonnes présentes :\\n\")\n\nColonnes présentes :\n\nprint(names(table))\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nQuestion 4\n\ndata_sqlite &lt;- \"C:\\\\Users\\\\cyril\\\\OneDrive\\\\Documents\\\\exercice.R\\\\data\\\\data.sqlite\"\n\nconnexion &lt;- dbConnect(SQLite(), data_sqlite)\n\ntables &lt;- dbListTables(connexion)\n\ncat(\"Tables présentes dans la base de données SQLite :\\n\")\n\nTables présentes dans la base de données SQLite :\n\ncat(tables, sep = \"\\n\")\n\nolympics_athletes\ntokyo_athletes\ntokyo_medals\ntokyo_teams\n\n\nQuestion 5\n\ndbWriteTable(connexion, \"olympics_athletes\", data_json, overwrite = TRUE)\n\ndbWriteTable(connexion, \"tokyo_athletes\", table_parquet, overwrite = TRUE)\n\ntables &lt;- dbListTables(connexion)\ncat(\"\\nTables présentes après l'ajout des nouvelles tables :\\n\")\n\n\nTables présentes après l'ajout des nouvelles tables :\n\ncat(tables, sep = \"\\n\")\n\nolympics_athletes\ntokyo_athletes\ntokyo_medals\ntokyo_teams\n\n\nQuestion 6\n\ncolonnes_olympics_athletes &lt;- dbListFields(connexion, \"olympics_athletes\")\n\ncat(\"Colonnes de la table olympics_athletes :\\n\")\n\nColonnes de la table olympics_athletes :\n\ncat(colonnes_olympics_athletes, sep = \"\\n\")\n\nID\nName\nSex\nAge\nHeight\nWeight\nTeam\nNOC\nGames\nCity\nSport\nEvent\nMedal\n\ndbDisconnect(connexion)\n\nQuestion 7\n\ndata_sqlite &lt;- \"C:\\\\Users\\\\cyril\\\\OneDrive\\\\Documents\\\\exercice.R\\\\data\\\\data.sqlite\"\n\nconnexion &lt;- dbConnect(SQLite(), data_sqlite)\n\nolympics_athletes &lt;- dbReadTable(connexion, \"olympics_athletes\")\n\nolympics_athletes_tibble &lt;- as_tibble(olympics_athletes)\n\nprint(olympics_athletes_tibble)\n\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\ndbDisconnect(connexion)\n\nQuestion 8\n\ndata_sqlite &lt;- \"C:\\\\Users\\\\cyril\\\\OneDrive\\\\Documents\\\\exercice.R\\\\data\\\\data.sqlite\"\n\nconnexion &lt;- dbConnect(SQLite(), data_sqlite)\n\nolympics_athletes &lt;- dbReadTable(connexion, \"olympics_athletes\")\n\nolympics_athletes &lt;- mutate(olympics_athletes, Sex = as.factor(Sex))\n\nprint(head(olympics_athletes))\n\n  ID                     Name Sex Age Height Weight           Team NOC\n1  1                A Dijiang   M  24    180     80          China CHN\n2  2                 A Lamusi   M  23    170     60          China CHN\n3  3      Gunnar Nielsen Aaby   M  24     NA     NA        Denmark DEN\n4  4     Edgar Lindenau Aabye   M  34     NA     NA Denmark/Sweden DEN\n5  5 Christine Jacoba Aaftink   F  21    185     82    Netherlands NED\n6  5 Christine Jacoba Aaftink   F  21    185     82    Netherlands NED\n        Games      City         Sport                              Event Medal\n1 1992 Summer Barcelona    Basketball        Basketball Men's Basketball  &lt;NA&gt;\n2 2012 Summer    London          Judo       Judo Men's Extra-Lightweight  &lt;NA&gt;\n3 1920 Summer Antwerpen      Football            Football Men's Football  &lt;NA&gt;\n4 1900 Summer     Paris    Tug-Of-War        Tug-Of-War Men's Tug-Of-War  Gold\n5 1988 Winter   Calgary Speed Skating   Speed Skating Women's 500 metres  &lt;NA&gt;\n6 1988 Winter   Calgary Speed Skating Speed Skating Women's 1,000 metres  &lt;NA&gt;\n\ndbDisconnect(connexion)\n\nQuestion 9\n\nolympics_athletes &lt;- olympics_athletes %&gt;%\n  separate(\n    col = Games, \n    into = c(\"Year\", \"Season\"), \n    sep = \" \",\n    convert = TRUE\n  ) %&gt;%\n  mutate(\n    isSummer = ifelse(tolower(Season) == \"summer\", TRUE, FALSE)\n  ) %&gt;%\n  select(-Season)  \nprint(head(olympics_athletes))\n\n  ID                     Name Sex Age Height Weight           Team NOC Year\n1  1                A Dijiang   M  24    180     80          China CHN 1992\n2  2                 A Lamusi   M  23    170     60          China CHN 2012\n3  3      Gunnar Nielsen Aaby   M  24     NA     NA        Denmark DEN 1920\n4  4     Edgar Lindenau Aabye   M  34     NA     NA Denmark/Sweden DEN 1900\n5  5 Christine Jacoba Aaftink   F  21    185     82    Netherlands NED 1988\n6  5 Christine Jacoba Aaftink   F  21    185     82    Netherlands NED 1988\n       City         Sport                              Event Medal isSummer\n1 Barcelona    Basketball        Basketball Men's Basketball  &lt;NA&gt;     TRUE\n2    London          Judo       Judo Men's Extra-Lightweight  &lt;NA&gt;     TRUE\n3 Antwerpen      Football            Football Men's Football  &lt;NA&gt;     TRUE\n4     Paris    Tug-Of-War        Tug-Of-War Men's Tug-Of-War  Gold     TRUE\n5   Calgary Speed Skating   Speed Skating Women's 500 metres  &lt;NA&gt;    FALSE\n6   Calgary Speed Skating Speed Skating Women's 1,000 metres  &lt;NA&gt;    FALSE\n\n\nQuestion 10\n\nmoyenne_age &lt;- olympics_athletes %&gt;%\n  filter(isSummer) %&gt;%  # Filtre pour garder uniquement les Jeux d'été\n  group_by(Year) %&gt;%     # Regrouper par année des Jeux\n  summarise(moyenne_age = mean(Age, na.rm = TRUE))  \nplus_jeune &lt;- moyenne_age %&gt;%\n  filter(moyenne_age == min(moyenne_age))  \n\nplus_vieux &lt;- moyenne_age %&gt;%\n  filter(moyenne_age == max(moyenne_age))  \ncat(\"Moyenne d'âge pour chaque édition des JO d'été :\\n\")\n\nMoyenne d'âge pour chaque édition des JO d'été :\n\nprint(moyenne_age)\n\n# A tibble: 29 × 2\n    Year moyenne_age\n   &lt;int&gt;       &lt;dbl&gt;\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.1\n 9  1928        28.0\n10  1932        30.2\n# ℹ 19 more rows\n\ncat(\"\\nEdition avec les athlètes les plus jeunes :\\n\")\n\n\nEdition avec les athlètes les plus jeunes :\n\nprint(plus_jeune)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1896        23.6\n\ncat(\"\\nEdition avec les athlètes les plus âgés :\\n\")\n\n\nEdition avec les athlètes les plus âgés :\n\nprint(plus_vieux)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1932        30.2\n\n\nQuestion 11\n\ntaille_max_par_discipline &lt;- olympics_athletes %&gt;%\n  filter(Sex == \"F\" & !is.na(Height)) %&gt;%  # Filtrer pour garder seulement les athlètes féminines avec une taille définie\n  group_by(Sport) %&gt;%                      # Regrouper par discipline\n  summarise(max_height = max(Height))      \nplus_grande_taille &lt;- taille_max_par_discipline %&gt;%\n  filter(max_height == max(max_height))    \nnombre_max_taille &lt;- taille_max_par_discipline %&gt;%\n  group_by(Sport) %&gt;%\n  summarise(nombre_max = sum(max_height == max(max_height))) %&gt;%\n  arrange(desc(nombre_max))           \ncat(\"Discipline des JO d'été avec la plus grande taille des athlètes féminines :\\n\")\n\nDiscipline des JO d'été avec la plus grande taille des athlètes féminines :\n\nprint(plus_grande_taille)\n\n# A tibble: 1 × 2\n  Sport      max_height\n  &lt;chr&gt;           &lt;int&gt;\n1 Basketball        213\n\ncat(\"\\nNombre de fois où chaque discipline a été la discipline avec la plus grande taille des athlètes :\\n\")\n\n\nNombre de fois où chaque discipline a été la discipline avec la plus grande taille des athlètes :\n\nprint(nombre_max_taille)\n\n# A tibble: 50 × 2\n   Sport            nombre_max\n   &lt;chr&gt;                 &lt;int&gt;\n 1 Alpine Skiing             1\n 2 Archery                   1\n 3 Art Competitions          1\n 4 Athletics                 1\n 5 Badminton                 1\n 6 Basketball                1\n 7 Beach Volleyball          1\n 8 Biathlon                  1\n 9 Bobsleigh                 1\n10 Boxing                    1\n# ℹ 40 more rows\n\n\nQuestion 12\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\nregex_date &lt;- \"\\\\b\\\\d{1,2} (?:Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\ndates &lt;- str_extract_all(texte, regex_date)[[1]]\n\n# Afficher les dates extraites\nprint(dates)\n\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\nQuestion 13\n\ntexte_modifie &lt;- str_replace_all(texte, c(\n  \"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \n  \"Avril\" = \"04\", \"Mai\" = \"05\", \"Juin\" = \"06\", \n  \"Juillet\" = \"07\", \"Août\" = \"08\", \"Septembre\" = \"09\", \n  \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\"\n))\n\nprint(texte_modifie)\n\n[1] \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\\nde 07 et 08. Les jeux de Rio ont eu lieu du 5 08 2016 au 20 08 2016,\\nceux de Tokyo du 23 07 2021 au 8 08 2021, et ceux de Paris auront lieu du\\n26 07 2024 au 11 08 2024. Plus de 10000 athlètes sont attendus du monde\\nentier à Paris.\"\n\n\nQuestion 14\n\ndates_extracted &lt;- c(\"5 Août 2016\", \"20 Août 2016\", \"23 Juillet 2021\", \"8 Août 2021\", \"26 Juillet 2024\", \"11 Août 2024\")\ndates_converties &lt;- dmy(dates_extracted)\n\nprint(dates_converties)\n\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\""
  }
]